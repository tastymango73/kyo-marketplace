generator client {
  provider = "prisma-client"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id                 String     @id @default(uuid())
  name               String
  email              String     @unique
  password           String?
  avatarUrl          String?    @map("avatar_url")
  role               UserRole   @default(REGULAR)
  isVerified         Boolean    @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean    @default(false) @map("is_two_factor_enabled")
  method             AuthMethod
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  accounts           Account[]

  @@map("users")
}

model Account {
  id           String     @id @default(uuid())
  provider     String
  refreshToken String?    @map("refresh_token")
  accessToken  String?    @map("access_token")
  userId       String     @map("user_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  method       AuthMethod
  expiresAt    Int        @map("expires_at")
  user         User       @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model Token {
  id        String    @id @default(uuid())
  email     String
  token     String    @unique
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresIn DateTime  @map("expires_in")

  @@map("tokens")
}

enum UserRole {
  REGULAR
  ADMIN

  @@map("user_roles")
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX

  @@map("auth_methods")
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET

  @@map("token_types")
}
